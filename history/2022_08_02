[{"short_id":"ljdnnd","short_id_url":"https://lobste.rs/s/ljdnnd","created_at":"2022-08-01T14:13:59.000-05:00","title":"Wi-Fine: it is fine to use public Wi-Fi","url":"https://wifine.gitlab.io/","score":37,"flags":0,"comment_count":16,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ljdnnd/wi_fine_it_is_fine_use_public_wi_fi","submitter_user":{"username":"eloy","created_at":"2019-01-19T09:19:51.000-06:00","is_admin":false,"about":"https://eloydegen.com","is_moderator":false,"karma":888,"avatar_url":"/avatars/eloy-100.png","invited_by_user":"timvisee"},"tags":["security"]},{"short_id":"exqimq","short_id_url":"https://lobste.rs/s/exqimq","created_at":"2022-08-01T11:47:02.000-05:00","title":"Crimes with Python's Pattern Matching","url":"https://www.hillelwayne.com/post/python-abc/","score":38,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/exqimq/crimes_with_python_s_pattern_matching","submitter_user":{"username":"hwayne","created_at":"2016-12-01T13:09:45.000-06:00","is_admin":false,"about":"I'm a programmer in the Chicago area. I like writing about weird programming techniques. Outside of programming I'm an avid juggler and chocolatier.","is_moderator":false,"karma":23173,"avatar_url":"/avatars/hwayne-100.png","invited_by_user":"flyingfisch","github_username":"hwayne","twitter_username":"Hillelogram"},"tags":["python"]},{"short_id":"8mw8sg","short_id_url":"https://lobste.rs/s/8mw8sg","created_at":"2022-08-01T09:29:40.000-05:00","title":"Running Linux microVMs on macOS (M1/M2)","url":"https://slp.prose.sh/running-microvms-on-m1","score":27,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/8mw8sg/running_linux_microvms_on_macos_m1_m2","submitter_user":{"username":"slp","created_at":"2019-01-31T09:46:47.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":69,"avatar_url":"/avatars/slp-100.png","invited_by_user":"gonzalo","github_username":"slp"},"tags":["linux","mac","virtualization"]},{"short_id":"ilgax7","short_id_url":"https://lobste.rs/s/ilgax7","created_at":"2022-07-31T22:14:35.000-05:00","title":"Use flake.nix, not Dockerfile","url":"https://youtu.be/0uixRE8xlbY","score":40,"flags":1,"comment_count":21,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ilgax7/use_flake_nix_not_dockerfile","submitter_user":{"username":"toastal","created_at":"2021-07-12T04:15:50.000-05:00","is_admin":false,"about":"a disciple of functional programming\r\n\r\nStop using Microsoft products; say _NO_ to neo-EEE including WSL, GitHub, Sponsors, Copilot, VS Code, Codespaces, Azure, npm, Teams","is_moderator":false,"karma":1005,"avatar_url":"/avatars/toastal-100.png","invited_by_user":"gerikson","github_username":"toastal","twitter_username":"toastal","keybase_signatures":[{"kb_username":"toastal","sig_hash":"be4ea8b4b314c4342e5dd97f1d845cc8586de0b0ec40ab4cd872f31071eab6030f"}]},"tags":["nix","video"]},{"short_id":"o5djs1","short_id_url":"https://lobste.rs/s/o5djs1","created_at":"2022-08-01T06:23:12.000-05:00","title":"Reflections on my first completed application in OCaml","url":"https://discuss.ocaml.org/t/reflections-on-my-first-completed-application-in-ocaml/6768","score":21,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/o5djs1/reflections_on_my_first_completed","submitter_user":{"username":"adsouza","created_at":"2015-05-03T18:35:51.000-05:00","is_admin":false,"about":"I'm a software engineer at a quantitative trading firm and liquidity provider in NYC that uses OCaml. \r\n\r\nPreviously I have done everything from Linux systems programming \u0026 distributed network services to desktop, mobile \u0026 web UI development at companies ranging in size from 10 to 200,000+ people using Go, Java, C++, C, Scala, Javascript \u0026 Python.\r\nThese days I work on a Linux desktop but use an M1 Mac Mini at home.\r\n\r\nMore historical deets at https://github.com/adsouza/longcv/blob/patch-1/adsouza-bio.md","is_moderator":false,"karma":6284,"avatar_url":"/avatars/adsouza-100.png","invited_by_user":"haxor","github_username":"adsouza","twitter_username":"Quikchange"},"tags":["ml"]},{"short_id":"606cll","short_id_url":"https://lobste.rs/s/606cll","created_at":"2022-08-01T14:15:14.000-05:00","title":"The Pine Formula","url":"https://tuxphones.com/pine-formula/","score":10,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/606cll/pine_formula","submitter_user":{"username":"raymii","created_at":"2013-11-20T11:58:43.000-06:00","is_admin":false,"about":"üêã\r\nhttps://raymii.org","is_moderator":false,"karma":17047,"avatar_url":"/avatars/raymii-100.png","invited_by_user":"journeysquid"},"tags":["hardware","linux"]},{"short_id":"zqgkrg","short_id_url":"https://lobste.rs/s/zqgkrg","created_at":"2022-08-01T12:44:40.000-05:00","title":"The Slotted Counter Pattern","url":"https://planetscale.com/blog/the-slotted-counter-pattern","score":5,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/zqgkrg/slotted_counter_pattern","submitter_user":{"username":"samlambert","created_at":"2022-06-27T20:43:32.000-05:00","is_admin":false,"about":"CEO @ PlanetScale","is_moderator":false,"karma":4,"avatar_url":"/avatars/samlambert-100.png","invited_by_user":"epberry"},"tags":["databases","distributed","web"]},{"short_id":"6ge1cy","short_id_url":"https://lobste.rs/s/6ge1cy","created_at":"2022-08-01T11:15:21.000-05:00","title":"Microsoft's Xenix - Microsoft tries their hand at UNIX","url":"https://computeradsfromthepast.substack.com/p/microsofts-xenix","score":4,"flags":0,"comment_count":6,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/6ge1cy/microsoft_s_xenix_microsoft_tries_their","submitter_user":{"username":"johnblood","created_at":"2018-03-27T05:50:29.000-05:00","is_admin":false,"about":"I write fiction and tech articles.","is_moderator":false,"karma":441,"avatar_url":"/avatars/johnblood-100.png","invited_by_user":"molloy","github_username":"JohnBlood","twitter_username":"JohnBlood"},"tags":["historical","unix"]},{"short_id":"rqnlaj","short_id_url":"https://lobste.rs/s/rqnlaj","created_at":"2022-08-01T02:47:18.000-05:00","title":"GeoRust","url":"https://georust.org/","score":24,"flags":0,"comment_count":11,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/rqnlaj/georust","submitter_user":{"username":"marklit","created_at":"2017-02-21T09:57:14.000-06:00","is_admin":false,"about":"","is_moderator":false,"karma":647,"avatar_url":"/avatars/marklit-100.png","invited_by_user":"vdm"},"tags":["rust"]},{"short_id":"pckldh","short_id_url":"https://lobste.rs/s/pckldh","created_at":"2022-08-01T13:08:22.000-05:00","title":"The best way to find performance bottlenecks: observing production","url":"https://pythonspeed.com/articles/measure-performance-production/","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/pckldh/best_way_find_performance_bottlenecks","submitter_user":{"username":"itamarst","created_at":"2016-04-28T10:05:47.000-05:00","is_admin":false,"about":"Writing about Python performance and faster development at https://pythonspeed.com, as well as offering consulting services. Writing about work/life balance and other software engineering skills at https://codewithoutrules.com.\r\n","is_moderator":false,"karma":4527,"avatar_url":"/avatars/itamarst-100.png","invited_by_user":"0x2ba22e11"},"tags":["performance"]},{"short_id":"zqtrru","short_id_url":"https://lobste.rs/s/zqtrru","created_at":"2022-08-01T21:43:06.000-05:00","title":"Generic Recursion Applied to Algebraic Graphs","url":"https://aneksteind.github.io/posts/2022-07-31.html","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/zqtrru/generic_recursion_applied_algebraic","submitter_user":{"username":"pao","created_at":"2020-07-05T19:33:28.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":46,"avatar_url":"/avatars/pao-100.png","invited_by_user":"kline"},"tags":["compsci","haskell","rust"]},{"short_id":"qdtqi2","short_id_url":"https://lobste.rs/s/qdtqi2","created_at":"2022-08-01T18:18:03.000-05:00","title":"Automatic memory management with short pauses that is simple to implement?","url":"","score":2,"flags":0,"comment_count":4,"description":"\u003cp\u003eI‚Äôm looking for recommendations for an automatic memory management scheme for a programming language. It must be portable, concurrent, and have short pause times. Simpler implementation is more important than good performance. Reference-counting and/or tracing garbage collection are both under consideration (I‚Äôm open to other suggestions too). The programmer should not have to think about memory management much, if at all (so, if reference-counting is used, the implementation should also detect reference cycles).\u003c/p\u003e\n\u003cp\u003eWhen I look at introductory literature, I see simple schemes with long pause times. When I look at popular programming language implementations, I see schemes that are performant at the cost of a complex implementation. But what I want is a simpler implementation, and I am willing to accept poor performance (except for my concern about pause times). By simpler to implement I mean fewer lines of code; if a library for garbage collection, the LOC in that library counts too. This is all all relative; it is understood that the simplest implementation with short pause times may still be pretty complex, and also in addition I will accept a little implementation complexity in exchange for a lot of performance. The criteria are:\u003c/p\u003e\n\u003cp\u003eportable, concurrent, short pause times \u0026gt; simple implementation \u0026gt; low memory usage \u0026gt; fast\u003c/p\u003e\n\u003cp\u003eI‚Äôm on the fence about compaction. I do want the user to be able to run programs for a long time without running out of memory. But compaction makes interop more complex. Various contemporary language implementations, such as Golang (Go) and Python have non-compacting GC and I don‚Äôt hear complaints about people‚Äôs programs crashing due to memory fragmentation. Is fragmentation only a theoretical issue that doesn‚Äôt come up in practice ‚Äì or, do those implementations  do something complicated to avoid fragmentation?\u003c/p\u003e\n\u003cp\u003eThis will be a high-level programming language with a runtime. The runtime will know where pointers are and could do things like box values and store GC metadata there, have write barriers and/or read barriers, reference count, etc.\u003c/p\u003e\n\u003cp\u003eWhy not a vanilla mark-sweep collector? That can have long pause times.\u003c/p\u003e\n\u003cp\u003eWhy not the Boehm-Demers-Weiser conservative garbage collector ( \u003ca href=\"https://www.hboehm.info/gc/\" rel=\"ugc\"\u003ehttps://www.hboehm.info/gc/\u003c/a\u003e )? (a) it is not portable; the docs say ‚ÄúOur collector is not, and cannot be, implemented as completely portable C code.‚Äù In concurrent, incremental mode it appears to be even less portable.\n(b) It has many lines of code.\n(c) Because our runtime will know where pointers are, we do not need a conservative collector.\u003c/p\u003e\n\u003cp\u003eWhat do you recommend? Thanks in advance.\u003c/p\u003e\n","description_plain":"I'm looking for recommendations for an automatic memory management scheme for a programming language. It must be portable, concurrent, and have short pause times. Simpler implementation is more important than good performance. Reference-counting and/or tracing garbage collection are both under consideration (I'm open to other suggestions too). The programmer should not have to think about memory management much, if at all (so, if reference-counting is used, the implementation should also detect reference cycles).\r\n\r\nWhen I look at introductory literature, I see simple schemes with long pause times. When I look at popular programming language implementations, I see schemes that are performant at the cost of a complex implementation. But what I want is a simpler implementation, and I am willing to accept poor performance (except for my concern about pause times). By simpler to implement I mean fewer lines of code; if a library for garbage collection, the LOC in that library counts too. This is all all relative; it is understood that the simplest implementation with short pause times may still be pretty complex, and also in addition I will accept a little implementation complexity in exchange for a lot of performance. The criteria are:\r\n\r\n  portable, concurrent, short pause times \u003e simple implementation \u003e low memory usage \u003e fast\r\n\r\nI'm on the fence about compaction. I do want the user to be able to run programs for a long time without running out of memory. But compaction makes interop more complex. Various contemporary language implementations, such as Golang (Go) and Python have non-compacting GC and I don't hear complaints about people's programs crashing due to memory fragmentation. Is fragmentation only a theoretical issue that doesn't come up in practice -- or, do those implementations  do something complicated to avoid fragmentation?\r\n\r\nThis will be a high-level programming language with a runtime. The runtime will know where pointers are and could do things like box values and store GC metadata there, have write barriers and/or read barriers, reference count, etc.\r\n\r\nWhy not a vanilla mark-sweep collector? That can have long pause times.\r\n\r\nWhy not the Boehm-Demers-Weiser conservative garbage collector ( https://www.hboehm.info/gc/ )? (a) it is not portable; the docs say \"Our collector is not, and cannot be, implemented as completely portable C code.\" In concurrent, incremental mode it appears to be even less portable.\r\n(b) It has many lines of code.\r\n(c) Because our runtime will know where pointers are, we do not need a conservative collector.\r\n\r\nWhat do you recommend? Thanks in advance.","comments_url":"https://lobste.rs/s/qdtqi2/automatic_memory_management_with_short","submitter_user":{"username":"bshanks","created_at":"2014-02-20T01:10:50.000-06:00","is_admin":false,"about":"Please see http://bayleshanks.com","is_moderator":false,"karma":428,"avatar_url":"/avatars/bshanks-100.png","invited_by_user":"MasonJar"},"tags":["ask","compilers","plt"]},{"short_id":"a7ndkr","short_id_url":"https://lobste.rs/s/a7ndkr","created_at":"2022-07-31T20:17:45.000-05:00","title":"Docker and the OCI container ecosystem","url":"https://lwn.net/SubscriberLink/902049/374614a66c0367f3/","score":25,"flags":0,"comment_count":13,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/a7ndkr/docker_oci_container_ecosystem","submitter_user":{"username":"nalzok","created_at":"2019-06-20T08:59:18.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":1265,"avatar_url":"/avatars/nalzok-100.png","invited_by_user":"WilhelmVonWeiner","github_username":"nalzok","twitter_username":"fixed_bug","keybase_signatures":[{"kb_username":"nalzok","sig_hash":"dfe65412a3e7fa28e06a07a9dc2c824b14032f40c58b3c4bac3f00bd837570bb0f"}]},"tags":["virtualization"]},{"short_id":"utlely","short_id_url":"https://lobste.rs/s/utlely","created_at":"2022-08-01T05:31:05.000-05:00","title":"What are you doing this week?","url":"","score":8,"flags":0,"comment_count":14,"description":"\u003cp\u003eWhat are you doing this week? Feel free to share!\u003c/p\u003e\n\u003cp\u003eKeep in mind it‚Äôs OK to do nothing at all, too.\u003c/p\u003e\n","description_plain":"What are you doing this week? Feel free to share!\r\n\r\nKeep in mind it‚Äôs OK to do nothing at all, too.","comments_url":"https://lobste.rs/s/utlely/what_are_you_doing_this_week","submitter_user":{"username":"caius","created_at":"2014-05-13T06:58:30.000-05:00","is_admin":false,"about":"Compulsive Geek, Ale Connoisseur, Occasionally Responsible Adult.","is_moderator":false,"karma":7858,"avatar_url":"/avatars/caius-100.png","invited_by_user":"lauris","github_username":"caius","twitter_username":"Caius"},"tags":["ask","programming"]},{"short_id":"63q4hz","short_id_url":"https://lobste.rs/s/63q4hz","created_at":"2022-08-01T14:44:45.000-05:00","title":"in which the word column has several meanings, none of them architectural","url":"https://technomancy.us/198","score":5,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/63q4hz/which_word_column_has_several_meanings","submitter_user":{"username":"robey","created_at":"2013-12-19T22:12:04.000-06:00","is_admin":false,"about":"Hi, I'm Robey. Generally interested in crypto, programming languages, and distributed systems.\r\n\r\n- fediverse: @robey@mastodon.technology\r\n","is_moderator":false,"karma":1505,"avatar_url":"/avatars/robey-100.png","invited_by_user":"seldo","github_username":"robey"},"tags":["a11y","programming"]},{"short_id":"o6ejcd","short_id_url":"https://lobste.rs/s/o6ejcd","created_at":"2022-08-01T23:35:18.000-05:00","title":"Interpolating Polygons","url":"http://lambdafunk.com/2017-02-21-Interpolating-Polygons/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/o6ejcd/interpolating_polygons","submitter_user":{"username":"friendlysock","created_at":"2014-02-20T00:43:41.000-06:00","is_admin":false,"about":"*Literally* full of ants.\r\n\r\nFriendly engineer and human being.\r\n\r\nStrong opinions held weakly, sometimes weekly.\r\n\r\n\u003e Gentrification is the process by which nebulous threats are pacified and alchemised into money. \r\n","is_moderator":false,"karma":37943,"avatar_url":"/avatars/friendlysock-100.png","invited_by_user":"MasonJar"},"tags":["graphics"]},{"short_id":"bi3lur","short_id_url":"https://lobste.rs/s/bi3lur","created_at":"2022-08-01T16:01:42.000-05:00","title":"make python devex: Towards Clone to Red-Green-Refactor in One Command with a 45+-Year-Old Tool","url":"https://youtu.be/WTsiO3brQwE","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bi3lur/make_python_devex_towards_clone_red_green","submitter_user":{"username":"colindean","created_at":"2014-04-17T22:35:48.000-05:00","is_admin":false,"about":"Scholar. Bon vivant. Champion of the oppressed.","is_moderator":false,"karma":2953,"avatar_url":"/avatars/colindean-100.png","invited_by_user":"bruceadams","github_username":"colindean","twitter_username":"colindean"},"tags":["python","video"]},{"short_id":"okw2pg","short_id_url":"https://lobste.rs/s/okw2pg","created_at":"2022-08-01T08:45:32.000-05:00","title":"Bazel Repository Cache","url":"https://sluongng.hashnode.dev/bazel-caching-explained-pt-3-repository-cache","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/okw2pg/bazel_repository_cache","submitter_user":{"username":"sluongng","created_at":"2019-08-11T12:16:27.000-05:00","is_admin":false,"about":"- **Title**: SRE @ Booking.com, Technology enthusiast.\r\n\r\n- **Interest**: Rust, Golang, Java.\r\n\r\n- **Location**: Amsterdam, Netherlands.","is_moderator":false,"karma":222,"avatar_url":"/avatars/sluongng-100.png","invited_by_user":"aleph","github_username":"sluongng","twitter_username":"sluongng"},"tags":["devops","scaling"]},{"short_id":"zo0nzb","short_id_url":"https://lobste.rs/s/zo0nzb","created_at":"2022-08-01T09:59:06.000-05:00","title":"Using Firecracker and Go to run short-lived, untrusted code execution jobs","url":"https://stanislas.blog/2021/08/firecracker/","score":5,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/zo0nzb/using_firecracker_go_run_short_lived","submitter_user":{"username":"eatonphil","created_at":"2019-09-01T20:23:02.000-05:00","is_admin":false,"about":"Building open-source data tools at [multiprocess.io](https://multiprocess.io).","is_moderator":false,"karma":3790,"avatar_url":"/avatars/eatonphil-100.png","invited_by_user":"calvin","github_username":"eatonphil","twitter_username":"phil_eaton"},"tags":["go","virtualization"]},{"short_id":"pjtihz","short_id_url":"https://lobste.rs/s/pjtihz","created_at":"2022-08-01T11:17:27.000-05:00","title":"google/go-flow-levee","url":"https://github.com/google/go-flow-levee","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/pjtihz/google_go_flow_levee","submitter_user":{"username":"wizardishungry","created_at":"2018-08-13T10:39:55.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":972,"avatar_url":"/avatars/wizardishungry-100.png","invited_by_user":"kusuriya","github_username":"WIZARDISHUNGRY","twitter_username":"WIZARDISHUNGRY","keybase_signatures":[{"kb_username":"wizardishungry","sig_hash":"c5e8c0f01d3e047b18f748ada5a8201b2cce3bf5bb2477ec7d404b1c99a5d94b0f"}]},"tags":["go","programming","security"]},{"short_id":"eh6ejg","short_id_url":"https://lobste.rs/s/eh6ejg","created_at":"2022-07-31T10:44:44.000-05:00","title":"Thoughts on static linking in Rust and how it affects distro maintainers","url":"https://old.reddit.com/r/rust/comments/us328s/can_someone_from_the_rust_community_share_their/i91o4wj/","score":29,"flags":0,"comment_count":13,"description":"\u003cp\u003eThis is in response to: \u003ca href=\"https://old.reddit.com/r/archlinux/comments/uqsy8v/are_rust_binaries_a_security_concern_because_of/\" rel=\"ugc\"\u003ehttps://old.reddit.com/r/archlinux/comments/uqsy8v/are_rust_binaries_a_security_concern_because_of/\u003c/a\u003e\u003c/p\u003e\n","description_plain":"This is in response to: https://old.reddit.com/r/archlinux/comments/uqsy8v/are_rust_binaries_a_security_concern_because_of/","comments_url":"https://lobste.rs/s/eh6ejg/thoughts_on_static_linking_rust_how_it","submitter_user":{"username":"untitaker","created_at":"2015-05-10T06:02:39.000-05:00","is_admin":false,"about":"https://unterwaditzer.net/","is_moderator":false,"karma":1431,"avatar_url":"/avatars/untitaker-100.png","invited_by_user":"geier"},"tags":["linux","rust"]},{"short_id":"zsbh6v","short_id_url":"https://lobste.rs/s/zsbh6v","created_at":"2022-08-01T09:42:32.000-05:00","title":"Favor composition over inheritance","url":"https://blogs.oracle.com/javamagazine/post/java-inheritance-composition","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/zsbh6v/favor_composition_over_inheritance","submitter_user":{"username":"asymptote","created_at":"2020-01-26T00:34:45.000-06:00","is_admin":false,"about":"### Keybase profile and proof\r\n\r\nMy public key: https://keybase.io/asim\r\n\r\nMy proof: https://keybase.io/asim/sigs/287a9aabf661d57bd9811b26102f249cca451a25834bcf386f80f51523a9df430f","is_moderator":false,"karma":504,"avatar_url":"/avatars/asymptote-100.png","invited_by_user":"nathell","github_username":"asimihsan","keybase_signatures":[{"kb_username":"asim","sig_hash":"287a9aabf661d57bd9811b26102f249cca451a25834bcf386f80f51523a9df430f"}]},"tags":["java","programming"]},{"short_id":"ttt6ub","short_id_url":"https://lobste.rs/s/ttt6ub","created_at":"2022-08-01T05:49:23.000-05:00","title":"ERNIE","url":"https://en.wikipedia.org/wiki/Premium_Bond#ERNIE","score":6,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ttt6ub/ernie","submitter_user":{"username":"f96","created_at":"2022-06-05T14:48:23.000-05:00","is_admin":false,"about":"","is_moderator":false,"karma":237,"avatar_url":"/avatars/f96-100.png","invited_by_user":"varjag"},"tags":["cryptography","hardware","historical"]},{"short_id":"2qahcu","short_id_url":"https://lobste.rs/s/2qahcu","created_at":"2022-08-01T03:04:52.000-05:00","title":"Journey to the Center of the Junction Box","url":"https://www.sevarg.net/2022/07/31/journey-to-the-center-of-the-junction-box/","score":5,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/2qahcu/journey_center_junction_box","submitter_user":{"username":"raymii","created_at":"2013-11-20T11:58:43.000-06:00","is_admin":false,"about":"üêã\r\nhttps://raymii.org","is_moderator":false,"karma":17047,"avatar_url":"/avatars/raymii-100.png","invited_by_user":"journeysquid"},"tags":["hardware"]},{"short_id":"yukuii","short_id_url":"https://lobste.rs/s/yukuii","created_at":"2022-08-01T10:01:37.000-05:00","title":"Building a Global Nervous System","url":"http://ceptr.org/","score":2,"flags":1,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/yukuii/building_global_nervous_system","submitter_user":{"username":"yonkeltron","created_at":"2018-07-09T19:03:57.000-05:00","is_admin":false,"about":"https://twitter.com/yonkeltron","is_moderator":false,"karma":2373,"avatar_url":"/avatars/yonkeltron-100.png","invited_by_user":"rocx","github_username":"yonkeltron","twitter_username":"yonkeltron"},"tags":["distributed"]}]