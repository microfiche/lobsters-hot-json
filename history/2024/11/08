[{"short_id":"c7mxqi","short_id_url":"https://lobste.rs/s/c7mxqi","created_at":"2024-11-07T21:04:18.000-06:00","title":"Rails 8.0: No PaaS Required","url":"https://rubyonrails.org/2024/11/7/rails-8-no-paas-required","score":26,"flags":0,"comment_count":14,"description":"\u003cp\u003eExtended release notes: \u003ca href=\"https://github.com/rails/rails/releases/tag/v8.0.0\" rel=\"ugc\"\u003ehttps://github.com/rails/rails/releases/tag/v8.0.0\u003c/a\u003e\u003c/p\u003e\n","description_plain":"Extended release notes: https://github.com/rails/rails/releases/tag/v8.0.0","comments_url":"https://lobste.rs/s/c7mxqi/rails_8_0_no_paas_required","submitter_user":"stanbright","user_is_author":false,"tags":["ruby"]},{"short_id":"10sono","short_id_url":"https://lobste.rs/s/10sono","created_at":"2024-11-08T03:17:59.000-06:00","title":"Rust's Sneaky Deadlock With `if let` Blocks","url":"https://brooksblog.bearblog.dev/rusts-sneaky-deadlock-with-if-let-blocks/","score":8,"flags":0,"comment_count":5,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/10sono/rust_s_sneaky_deadlock_with_if_let_blocks","submitter_user":"bitfield","user_is_author":false,"tags":["rust"]},{"short_id":"u3t4sg","short_id_url":"https://lobste.rs/s/u3t4sg","created_at":"2024-11-07T08:15:18.000-06:00","title":"XMPP: The Forgotten Gem of Instant Messaging","url":"https://adele.pages.casa/md/blog/xmpp-the-forgotten-gem-of-instant-messaging.md","score":43,"flags":0,"comment_count":49,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/u3t4sg/xmpp_forgotten_gem_instant_messaging","submitter_user":"kidon","user_is_author":false,"tags":["networking"]},{"short_id":"qaojtk","short_id_url":"https://lobste.rs/s/qaojtk","created_at":"2024-11-07T16:31:22.000-06:00","title":"Linus Torvalds lands a 2.6% performance improvement with minor Linux kernel patch","url":"https://www.phoronix.com/news/Linus-2.6p-Faster-Scale-Patch","score":28,"flags":1,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/qaojtk/linus_torvalds_lands_2_6_performance","submitter_user":"pauloxnet","user_is_author":false,"tags":["linux","performance","person"]},{"short_id":"o15iiw","short_id_url":"https://lobste.rs/s/o15iiw","created_at":"2024-11-07T13:00:04.000-06:00","title":"gccrs: An alternative compiler for Rust","url":"https://blog.rust-lang.org/2024/11/07/gccrs-an-alternative-compiler-for-rust.html","score":38,"flags":1,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/o15iiw/gccrs_alternative_compiler_for_rust","submitter_user":"drmorr","user_is_author":false,"tags":["rust"]},{"short_id":"dzuzpw","short_id_url":"https://lobste.rs/s/dzuzpw","created_at":"2024-11-07T16:13:59.000-06:00","title":"CORAL: a Rust-like Borrow Checker for C","url":"https://github.com/tiagodusilva/coral","score":19,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/dzuzpw/coral_rust_like_borrow_checker_for_c","submitter_user":"linkdd","user_is_author":false,"tags":["c","plt","programming","rust"]},{"short_id":"4pkl0h","short_id_url":"https://lobste.rs/s/4pkl0h","created_at":"2024-11-08T06:14:49.000-06:00","title":"QNX becomes free for non-commercial use","url":"https://www.osnews.com/story/141089/qnx-becomes-free-for-non-commercial-use-releases-raspberry-pi-4-image/","score":4,"flags":0,"comment_count":1,"description":"\u003cp\u003eI went with this link instead of the \u003ca href=\"https://blackberry.qnx.com/en/products/qnx-everywhere\" rel=\"ugc\"\u003eofficial one from Blackberry\u003c/a\u003e since that one felt more like a commercial blurb.\u003c/p\u003e\n","description_plain":"I went with this link instead of the [official one from Blackberry](https://blackberry.qnx.com/en/products/qnx-everywhere) since that one felt more like a commercial blurb.","comments_url":"https://lobste.rs/s/4pkl0h/qnx_becomes_free_for_non_commercial_use","submitter_user":"fernplus","user_is_author":false,"tags":["osdev"]},{"short_id":"vwmshx","short_id_url":"https://lobste.rs/s/vwmshx","created_at":"2024-11-08T03:16:08.000-06:00","title":"Desktop icons are surprisingly hard","url":"https://akselmo.dev/posts/plasma-desktop-icons-positioning-refactor/","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/vwmshx/desktop_icons_are_surprisingly_hard","submitter_user":"Aks","user_is_author":true,"tags":["linux","programming"]},{"short_id":"efl89f","short_id_url":"https://lobste.rs/s/efl89f","created_at":"2024-11-07T13:53:07.000-06:00","title":"An Opinionated Guide to Keyboard Thumb Keys","url":"https://johnlindquist.com/an-opinionated-guide-to-keyboard-thumb-keys/","score":15,"flags":0,"comment_count":9,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/efl89f/opinionated_guide_keyboard_thumb_keys","submitter_user":"pushcx","user_is_author":false,"tags":["hardware"]},{"short_id":"vohs8m","short_id_url":"https://lobste.rs/s/vohs8m","created_at":"2024-11-08T04:40:05.000-06:00","title":"Following up \"Mother of all htmx demos\"","url":"https://david.guillot.me/en/posts/tech/following-up-mother-of-all-htmx-demos/","score":5,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/vohs8m/following_up_mother_all_htmx_demos","submitter_user":"eduard","user_is_author":false,"tags":["javascript","web"]},{"short_id":"2ltv2m","short_id_url":"https://lobste.rs/s/2ltv2m","created_at":"2024-11-08T05:11:00.000-06:00","title":"What are you doing this weekend?","url":"","score":2,"flags":0,"comment_count":5,"description":"\u003cp\u003eFeel free to tell what you plan on doing this weekend and even ask for help or feedback.\u003c/p\u003e\n\u003cp\u003ePlease keep in mind it’s more than OK to do nothing at all too!\u003c/p\u003e\n","description_plain":"Feel free to tell what you plan on doing this weekend and even ask for help or feedback.\r\n\r\nPlease keep in mind it’s more than OK to do nothing at all too!","comments_url":"https://lobste.rs/s/2ltv2m/what_are_you_doing_this_weekend","submitter_user":"caius","user_is_author":true,"tags":["ask","programming"]},{"short_id":"8zmwgi","short_id_url":"https://lobste.rs/s/8zmwgi","created_at":"2024-11-08T07:13:50.000-06:00","title":"Announcing Chicory 1.0.0-M1: First Milestone Release","url":"https://chicory.dev/blog/chicory-1.0.0-M1","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/8zmwgi/announcing_chicory_1_0_0_m1_first","submitter_user":"evacchi","user_is_author":true,"tags":["compilers","java","programming","wasm"]},{"short_id":"7qf9vp","short_id_url":"https://lobste.rs/s/7qf9vp","created_at":"2024-11-07T15:44:06.000-06:00","title":"Ysco - managed automated updates for Go services","url":"https://www.ueber.net/who/mjl/blog/p/ysco-managed-automated-updates-for-go-services/","score":8,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/7qf9vp/ysco_managed_automated_updates_for_go","submitter_user":"mjl","user_is_author":true,"tags":["go","release"]},{"short_id":"2hboon","short_id_url":"https://lobste.rs/s/2hboon","created_at":"2024-11-08T02:41:57.000-06:00","title":"Creating a Brainrot Language Server in Golang","url":"https://jitesh117.github.io/blog/creating-a-brainrot-language-server-in-golang/","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/2hboon/creating_brainrot_language_server","submitter_user":"zladuric","user_is_author":false,"tags":["go"]},{"short_id":"xaoazl","short_id_url":"https://lobste.rs/s/xaoazl","created_at":"2024-11-07T20:23:07.000-06:00","title":"I'm not mutable, I'm partially instantiated","url":"https://blog.dnmfarrell.com/post/incomplete-data-structures/","score":8,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/xaoazl/i_m_not_mutable_i_m_partially_instantiated","submitter_user":"classichasclass","user_is_author":false,"tags":["programming"]},{"short_id":"hdbvyy","short_id_url":"https://lobste.rs/s/hdbvyy","created_at":"2024-11-07T13:08:49.000-06:00","title":"determination: Rust typecheckers for System F and System F-omega","url":"https://hg.sr.ht/~icefox/determination","score":8,"flags":1,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/hdbvyy/determination_rust_typecheckers_for","submitter_user":"icefox","user_is_author":true,"tags":["plt"]},{"short_id":"rzmesn","short_id_url":"https://lobste.rs/s/rzmesn","created_at":"2024-11-06T20:12:45.000-06:00","title":"getopt() but smaller","url":"https://dotat.at/@/2024-11-06-getopt.html","score":41,"flags":1,"comment_count":11,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/rzmesn/getopt_smaller","submitter_user":"fanf","user_is_author":true,"tags":["c"]},{"short_id":"fvlfzx","short_id_url":"https://lobste.rs/s/fvlfzx","created_at":"2024-11-07T01:09:51.000-06:00","title":"The Big Array Size Survey for C","url":"https://thephd.dev/the-big-array-size-survey-for-c","score":27,"flags":0,"comment_count":11,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/fvlfzx/big_array_size_survey_for_c","submitter_user":"darichey","user_is_author":false,"tags":["c"]},{"short_id":"z1cyr1","short_id_url":"https://lobste.rs/s/z1cyr1","created_at":"2024-11-07T07:46:01.000-06:00","title":"FreeBSD 2024 Q3 Status Report","url":"https://www.freebsd.org/status/report-2024-07-2024-09/","score":18,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/z1cyr1/freebsd_2024_q3_status_report","submitter_user":"vermaden","user_is_author":false,"tags":["freebsd"]},{"short_id":"gsj2e2","short_id_url":"https://lobste.rs/s/gsj2e2","created_at":"2024-11-08T07:14:59.000-06:00","title":"How to self-host all of Bluesky (except the AppView (for now))","url":"https://alice.bsky.sh/post/3laega7icmi2q","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/gsj2e2/how_self_host_all_bluesky_except_appview","submitter_user":"icy","user_is_author":false,"tags":["distributed","web"]},{"short_id":"xd0xuq","short_id_url":"https://lobste.rs/s/xd0xuq","created_at":"2024-11-08T03:05:19.000-06:00","title":"Using a DIY tool to add custom QMK features to your Oryx layout","url":"https://blog.zsa.io/oryx-custom-qmk-features/","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/xd0xuq/using_diy_tool_add_custom_qmk_features","submitter_user":"knl","user_is_author":false,"tags":["hardware"]},{"short_id":"tevuuh","short_id_url":"https://lobste.rs/s/tevuuh","created_at":"2024-11-07T04:01:20.000-06:00","title":"Proposal for a Django project template","url":"https://david.guillot.me/en/posts/tech/proposal-for-a-django-project-template/","score":9,"flags":1,"comment_count":10,"description":"\u003cp\u003eI usually don’t post my own blog here, but the whole idea of that post is to get feedback on my proposal, to see if it makes sense to anyone.\u003c/p\u003e\n","description_plain":"I usually don't post my own blog here, but the whole idea of that post is to get feedback on my proposal, to see if it makes sense to anyone.","comments_url":"https://lobste.rs/s/tevuuh/proposal_for_django_project_template","submitter_user":"David-Guillot","user_is_author":true,"tags":["practices","web"]},{"short_id":"zxl0od","short_id_url":"https://lobste.rs/s/zxl0od","created_at":"2024-11-07T23:27:52.000-06:00","title":"Understanding Trust Relationships in Cloud-Based Confidential Computing","url":"https://systex24.github.io/papers/systex24-final21.pdf","score":2,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/zxl0od/understanding_trust_relationships","submitter_user":"df","user_is_author":false,"tags":["pdf","security"]},{"short_id":"jel39y","short_id_url":"https://lobste.rs/s/jel39y","created_at":"2024-11-07T12:30:52.000-06:00","title":"PYLINGUAL: Toward Perfect Decompilation of Evolving High-Level Languages","url":"https://doi.ieeecomputersociety.org/10.1109/SP61157.2025.00052","score":5,"flags":1,"comment_count":1,"description":"\u003cp\u003eAbstract:\u003c/p\u003e\n\u003cp\u003ePython is one of the most popular programming languages among both industry developers and malware authors. Despite demand for Python decompilers, community efforts to maintain automatic Python decompilation tools have been hindered by Python’s aggressive language improvements and unstable bytecode specification. Every year, language features are added, code generation undergoes significant changes, and opcodes are added, deleted, and modified. Our research aims to integrate NLP techniques with classical PL theory to create a Python decompiler that accomodates evolving language features and changes to the bytecode specification with minimal human maintenance effort. PyLingual plugs in data-driven NLP components to a version-agnostic core to automatically absorb superficial bytecode and compiler changes, while leveraging programmatic components for abstract control flow reconstruction. To establish trust in the decompilation results, we introduce a stringent correctness measure based on “perfect decompilation”, a statically verifiable refinement of semantic equivalence. We demonstrate the efficacy of our approach with extensive real-world datasets of benign and malicious Python source code and their corresponding compiled PYC binaries. Our research makes three major contributions: (1) we present PyLingual, a scalable, data-driven decompilation framework with state-of-the-art support for Python versions 3.6 through 3.12, improving the perfect decompilation rate by an average of 45% over the best results of existing decompiler across four datasets; (2) we provide a Python decompiler evaluation framework that verifies decompilation results with perfect decompilation; and (3) we launch PyLingual as a public online service.\u003c/p\u003e\n","description_plain":"Abstract:\r\n\r\nPython is one of the most popular programming languages among both industry developers and malware authors. Despite demand for Python decompilers, community efforts to maintain automatic Python decompilation tools have been hindered by Python's aggressive language improvements and unstable bytecode specification. Every year, language features are added, code generation undergoes significant changes, and opcodes are added, deleted, and modified. Our research aims to integrate NLP techniques with classical PL theory to create a Python decompiler that accomodates evolving language features and changes to the bytecode specification with minimal human maintenance effort. PyLingual plugs in data-driven NLP components to a version-agnostic core to automatically absorb superficial bytecode and compiler changes, while leveraging programmatic components for abstract control flow reconstruction. To establish trust in the decompilation results, we introduce a stringent correctness measure based on \"perfect decompilation\", a statically verifiable refinement of semantic equivalence. We demonstrate the efficacy of our approach with extensive real-world datasets of benign and malicious Python source code and their corresponding compiled PYC binaries. Our research makes three major contributions: (1) we present PyLingual, a scalable, data-driven decompilation framework with state-of-the-art support for Python versions 3.6 through 3.12, improving the perfect decompilation rate by an average of 45% over the best results of existing decompiler across four datasets; (2) we provide a Python decompiler evaluation framework that verifies decompilation results with perfect decompilation; and (3) we launch PyLingual as a public online service.","comments_url":"https://lobste.rs/s/jel39y/pylingual_toward_perfect_decompilation","submitter_user":"2elli","user_is_author":true,"tags":["python","security"]},{"short_id":"ocnnp0","short_id_url":"https://lobste.rs/s/ocnnp0","created_at":"2024-11-07T16:37:04.000-06:00","title":"Bringing faster exceptions to Rust","url":"https://purplesyringa.moe/blog/bringing-faster-exceptions-to-rust/","score":3,"flags":1,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ocnnp0/bringing_faster_exceptions_rust","submitter_user":"fanf","user_is_author":false,"tags":["performance","rust"]}]