[{"short_id":"vsbhpu","short_id_url":"https://lobste.rs/s/vsbhpu","created_at":"2024-11-19T06:23:06.000-06:00","title":"An Unreachable Hidden XKCD Easter Egg inside CPython","url":"https://blog.codingconfessions.com/p/cpython-hidden-xkcd-easter-egg","score":59,"flags":11,"comment_count":22,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/vsbhpu/unreachable_hidden_xkcd_easter_egg","submitter_user":"abhi9u","user_is_author":true,"tags":["c","python"]},{"short_id":"6e8zc3","short_id_url":"https://lobste.rs/s/6e8zc3","created_at":"2024-11-20T02:02:32.000-06:00","title":"AAA - Analytical Anti-Aliasing","url":"https://blog.frost.kiwi/analytical-anti-aliasing/","score":10,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/6e8zc3/aaa_analytical_anti_aliasing","submitter_user":"FrostKiwi","user_is_author":true,"tags":["graphics"]},{"short_id":"i5xnsj","short_id_url":"https://lobste.rs/s/i5xnsj","created_at":"2024-11-19T10:15:01.000-06:00","title":"Testing with Go and PostgreSQL: ephemeral DBs","url":"https://michael.stapelberg.ch/posts/2024-11-19-testing-with-go-and-postgresql-ephemeral-dbs/","score":32,"flags":1,"comment_count":10,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/i5xnsj/testing_with_go_postgresql_ephemeral_dbs","submitter_user":"stapelberg","user_is_author":true,"tags":["databases","go","testing"]},{"short_id":"3zbdil","short_id_url":"https://lobste.rs/s/3zbdil","created_at":"2024-11-20T05:54:37.000-06:00","title":"Async/Await Is Real And Can Hurt You","url":"https://trouble.mataroa.blog/blog/asyncawait-is-real-and-can-hurt-you/","score":2,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/3zbdil/async_await_is_real_can_hurt_you","submitter_user":"airdrop","user_is_author":true,"tags":["rust"]},{"short_id":"fxjcuf","short_id_url":"https://lobste.rs/s/fxjcuf","created_at":"2024-11-19T08:59:12.000-06:00","title":"What to expect from CHICKEN 6","url":"https://www.more-magic.net/posts/chicken-6.html","score":26,"flags":0,"comment_count":13,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/fxjcuf/what_expect_from_chicken_6","submitter_user":"Bunny351","user_is_author":true,"tags":["compilers","lisp"]},{"short_id":"tlaaae","short_id_url":"https://lobste.rs/s/tlaaae","created_at":"2024-11-20T00:45:31.000-06:00","title":"Lush: my favorite small programming language","url":"https://scottlocklin.wordpress.com/2024/11/19/lush-my-favorite-small-programming-language/","score":12,"flags":1,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/tlaaae/lush_my_favorite_small_programming","submitter_user":"williballenthin","user_is_author":false,"tags":["lisp"]},{"short_id":"qhdfdg","short_id_url":"https://lobste.rs/s/qhdfdg","created_at":"2024-11-20T01:12:59.000-06:00","title":"webvm: Virtual Machine for the Web","url":"https://github.com/leaningtech/webvm","score":10,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/qhdfdg/webvm_virtual_machine_for_web","submitter_user":"txxnano","user_is_author":false,"tags":["wasm"]},{"short_id":"bfbmqs","short_id_url":"https://lobste.rs/s/bfbmqs","created_at":"2024-11-20T03:54:50.000-06:00","title":"Letâ€™s Encrypt: Ten Years","url":"https://letsencrypt.org/2014/11/18/announcing-lets-encrypt/","score":5,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bfbmqs/let_s_encrypt_ten_years","submitter_user":"freddyb","user_is_author":false,"tags":["security"]},{"short_id":"ovbb1u","short_id_url":"https://lobste.rs/s/ovbb1u","created_at":"2024-11-19T10:28:28.000-06:00","title":"Understanding the BM25 full text search algorithm","url":"https://emschwartz.me/understanding-the-bm25-full-text-search-algorithm/","score":18,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ovbb1u/understanding_bm25_full_text_search","submitter_user":"emschwartz","user_is_author":true,"tags":["compsci","databases","math"]},{"short_id":"vvosch","short_id_url":"https://lobste.rs/s/vvosch","created_at":"2024-11-20T06:43:52.000-06:00","title":"FireDucks : Pandas but 100x faster","url":"https://hwisnu.bearblog.dev/fireducks-pandas-but-100x-faster/","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/vvosch/fireducks_pandas_100x_faster","submitter_user":"knl","user_is_author":false,"tags":["python"]},{"short_id":"rawcyg","short_id_url":"https://lobste.rs/s/rawcyg","created_at":"2024-11-19T11:20:51.000-06:00","title":"On \"Safe\" C++","url":"https://izzys.casa/2024/11/on-safe-cxx/","score":64,"flags":4,"comment_count":35,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/rawcyg/on_safe_c","submitter_user":"alper","user_is_author":false,"tags":["c++","rant"]},{"short_id":"2jxble","short_id_url":"https://lobste.rs/s/2jxble","created_at":"2024-11-19T13:02:03.000-06:00","title":"Loop targets","url":"https://nedbatchelder.com/blog/202411/loop_targets.html","score":20,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/2jxble/loop_targets","submitter_user":"ubernostrum","user_is_author":false,"tags":["python"]},{"short_id":"jenpvy","short_id_url":"https://lobste.rs/s/jenpvy","created_at":"2024-11-20T06:34:06.000-06:00","title":"vim-history: Very very old history of Vim (from v1.14 to v6.4)","url":"https://github.com/vim/vim-history","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/jenpvy/vim_history_very_very_old_history_vim_from","submitter_user":"hwayne","user_is_author":false,"tags":["historical","vim"]},{"short_id":"i29fpn","short_id_url":"https://lobste.rs/s/i29fpn","created_at":"2024-11-19T03:16:45.000-06:00","title":"Paged Out! #5 - hacker zine release","url":"https://pagedout.institute/download/PagedOut_005.pdf","score":51,"flags":0,"comment_count":5,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/i29fpn/paged_out_5_hacker_zine_release","submitter_user":"hauleth","user_is_author":false,"tags":["c++","linux","pdf"]},{"short_id":"ekhclm","short_id_url":"https://lobste.rs/s/ekhclm","created_at":"2024-11-20T03:18:20.000-06:00","title":"chatgpt-shell goes multi-model","url":"https://lmno.lol/alvaro/chatgpt-shell-goes-multi-model","score":2,"flags":1,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ekhclm/chatgpt_shell_goes_multi_model","submitter_user":"xenodium","user_is_author":true,"tags":["ai","emacs","lisp"]},{"short_id":"o2xl17","short_id_url":"https://lobste.rs/s/o2xl17","created_at":"2024-11-20T05:01:35.000-06:00","title":"Ghosts of Departed Proofs","url":"https://iohk.io/en/research/library/papers/ghosts-of-departed-proofs-functional-pearls/","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/o2xl17/ghosts_departed_proofs","submitter_user":"fanf","user_is_author":false,"tags":["haskell","pdf"]},{"short_id":"p5gpeq","short_id_url":"https://lobste.rs/s/p5gpeq","created_at":"2024-11-19T14:38:06.000-06:00","title":"Original ChipWits FORTH Code Open Sourced","url":"https://chipwits.com/2024/11/16/chipwits-40th-birthday-original-forth-code-open-sourced/","score":16,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/p5gpeq/original_chipwits_forth_code_open","submitter_user":"lorddimwit","user_is_author":false,"tags":["games","historical","retrocomputing"]},{"short_id":"pamogv","short_id_url":"https://lobste.rs/s/pamogv","created_at":"2024-11-20T06:25:18.000-06:00","title":"GitHub offering security tools, advice to Open Source Projects","url":"https://github.blog/news-insights/company-news/announcing-github-secure-open-source-fund/","score":1,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/pamogv/github_offering_security_tools_advice","submitter_user":"popey","user_is_author":false,"tags":["security"]},{"short_id":"cbmzpv","short_id_url":"https://lobste.rs/s/cbmzpv","created_at":"2024-11-19T20:48:58.000-06:00","title":"Nominal for Storing, Structural for Manipulating","url":"https://welltypedwitch.bearblog.dev/nominal-for-storing-structural-for-manipulating/","score":6,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/cbmzpv/nominal_for_storing_structural_for","submitter_user":"hongminhee","user_is_author":false,"tags":["plt"]},{"short_id":"xalc4i","short_id_url":"https://lobste.rs/s/xalc4i","created_at":"2024-11-19T15:42:49.000-06:00","title":"Go sync.Once is Simple... Does It Really?","url":"https://victoriametrics.com/blog/go-sync-once/","score":9,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/xalc4i/go_sync_once_is_simple_does_it_really","submitter_user":"eduard","user_is_author":false,"tags":["go"]},{"short_id":"xevir0","short_id_url":"https://lobste.rs/s/xevir0","created_at":"2024-11-19T06:29:07.000-06:00","title":"Running web browsers in a FreeBSD jail","url":"https://www.tumfatig.net/2024/running-web-browsers-in-freebsd-jail/","score":12,"flags":0,"comment_count":9,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/xevir0/running_web_browsers_freebsd_jail","submitter_user":"jmillikin","user_is_author":false,"tags":["freebsd"]},{"short_id":"bpfsyf","short_id_url":"https://lobste.rs/s/bpfsyf","created_at":"2024-11-19T12:08:48.000-06:00","title":"Hyrum's Law in Golang","url":"https://abenezer.org/blog/hyrum-law-in-golang","score":8,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bpfsyf/hyrum_s_law_golang","submitter_user":"telemachus","user_is_author":false,"tags":["api","go","practices"]},{"short_id":"onhd7w","short_id_url":"https://lobste.rs/s/onhd7w","created_at":"2024-11-20T06:09:36.000-06:00","title":"WavPack's roundtrip advantage over FLAC","url":"https://dbohdan.com/wavpack","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/onhd7w/wavpack_s_roundtrip_advantage_over_flac","submitter_user":"mesaoptimizer","user_is_author":false,"tags":["performance"]},{"short_id":"stdvxh","short_id_url":"https://lobste.rs/s/stdvxh","created_at":"2024-11-20T01:50:25.000-06:00","title":"Spineless Traversal for Layout Invalidation","url":"https://arxiv.org/pdf/2411.10659","score":2,"flags":0,"comment_count":0,"description":"\u003cp\u003eLatency is a major concern for web rendering engines like those in Chrome, Safari, and Firefox. These engines reduce latency by using an incremental layout algorithm to redraw the page when the user interacts with it. In such an algorithm, elements that change frame-to-frame are marked dirty; only the dirty elements need be processed to draw the next frame, dramatically reducing latency. However, the standard incremental layout algorithm must search the page for dirty elements, accessing a number of auxiliary elements in the process. These auxiliary elements add cache misses and stalled cycles, and are responsible for a sizable fraction of all layout latency. We introduce a new, faster incremental layout algorithm called Spineless Traversal. Spineless Traversal uses a more computationally demanding priority queue algorithm to avoid the need to access auxiliary nodes and thus reduces cache traffic and stalls. This leads to dramatic speedups on the most latency-critical interactions such as hovering, typing, or animations. Moreover, thanks to numerous low-level optimizations, we are able to make Spineless Traversal competitive across the whole spectrum of incremental layout workloads. As a result, across 2216 benchmarks, Spineless Traversal is faster on 78.2% of the benchmark, with a mean speedup of 3.23x concentrated in the most latency-critical interactions such as hovering, typing, and animations.\u003c/p\u003e\n","description_plain":"Latency is a major concern for web rendering engines like those in Chrome, Safari, and Firefox. These engines reduce latency by using an incremental layout algorithm to redraw the page when the user interacts with it. In such an algorithm, elements that change frame-to-frame are marked dirty; only the dirty elements need be processed to draw the next frame, dramatically reducing latency. However, the standard incremental layout algorithm must search the page for dirty elements, accessing a number of auxiliary elements in the process. These auxiliary elements add cache misses and stalled cycles, and are responsible for a sizable fraction of all layout latency. We introduce a new, faster incremental layout algorithm called Spineless Traversal. Spineless Traversal uses a more computationally demanding priority queue algorithm to avoid the need to access auxiliary nodes and thus reduces cache traffic and stalls. This leads to dramatic speedups on the most latency-critical interactions such as hovering, typing, or animations. Moreover, thanks to numerous low-level optimizations, we are able to make Spineless Traversal competitive across the whole spectrum of incremental layout workloads. As a result, across 2216 benchmarks, Spineless Traversal is faster on 78.2% of the benchmark, with a mean speedup of 3.23x concentrated in the most latency-critical interactions such as hovering, typing, and animations.","comments_url":"https://lobste.rs/s/stdvxh/spineless_traversal_for_layout","submitter_user":"asb","user_is_author":false,"tags":["browsers","pdf","performance"]},{"short_id":"1xnw8x","short_id_url":"https://lobste.rs/s/1xnw8x","created_at":"2024-11-19T03:21:53.000-06:00","title":"Harmful Practices Considered Best","url":"https://zakhary.dev/blog/considered-harmful","score":15,"flags":0,"comment_count":21,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/1xnw8x/harmful_practices_considered_best","submitter_user":"bitfield","user_is_author":false,"tags":["practices"]}]