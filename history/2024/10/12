[{"short_id":"qcppwf","short_id_url":"https://lobste.rs/s/qcppwf","created_at":"2024-10-12T04:47:50.000-05:00","title":"LLMs don’t do formal reasoning - and that is a HUGE problem","url":"https://garymarcus.substack.com/p/llms-dont-do-formal-reasoning-and","score":16,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/qcppwf/llms_don_t_do_formal_reasoning_is_huge","submitter_user":"voytec","user_is_author":false,"tags":["ai"]},{"short_id":"6lccpf","short_id_url":"https://lobste.rs/s/6lccpf","created_at":"2024-10-11T17:50:34.000-05:00","title":"Every bug/quirk of the Windows resource compiler (rc.exe), probably","url":"https://www.ryanliptak.com/blog/every-rc-exe-bug-quirk-probably/","score":34,"flags":0,"comment_count":9,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/6lccpf/every_bug_quirk_windows_resource","submitter_user":"alichraghi","user_is_author":false,"tags":["windows","zig"]},{"short_id":"imggoa","short_id_url":"https://lobste.rs/s/imggoa","created_at":"2024-10-12T00:33:22.000-05:00","title":"A Dictionary of Single-Letter Variable Names","url":"http://jackkelly.name/blog/archives/2024/10/12/a_dictionary_of_single-letter_variable_names","score":13,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/imggoa/dictionary_single_letter_variable_names","submitter_user":"jackdk","user_is_author":true,"tags":["haskell"]},{"short_id":"tfxw8x","short_id_url":"https://lobste.rs/s/tfxw8x","created_at":"2024-10-11T21:24:05.000-05:00","title":"The Ultimate Conditional Syntax","url":"https://dl.acm.org/doi/10.1145/3689746","score":20,"flags":0,"comment_count":5,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/tfxw8x/ultimate_conditional_syntax","submitter_user":"azhenley","user_is_author":false,"tags":["plt"]},{"short_id":"tl0yuh","short_id_url":"https://lobste.rs/s/tl0yuh","created_at":"2024-10-11T05:17:03.000-05:00","title":"Adapting Plan 9's listen to GNU Guix","url":"https://the-dam.org/docs/explanations/Plan9ListenOnLinux.html","score":18,"flags":0,"comment_count":14,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/tl0yuh/adapting_plan_9_s_listen_gnu_guix","submitter_user":"linschn","user_is_author":true,"tags":["linux","lisp","nix","osdev","unix"]},{"short_id":"5fo3j1","short_id_url":"https://lobste.rs/s/5fo3j1","created_at":"2024-10-11T04:07:09.000-05:00","title":"Idol, an IDL and binary encoding for zero-copy local IPC","url":"https://github.com/jmillikin/idol","score":21,"flags":0,"comment_count":13,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/5fo3j1/idol_idl_binary_encoding_for_zero_copy","submitter_user":"jmillikin","user_is_author":true,"tags":["go","show"]},{"short_id":"oex1is","short_id_url":"https://lobste.rs/s/oex1is","created_at":"2024-10-12T05:20:53.000-05:00","title":"A history of Clojure (2020)","url":"https://dl.acm.org/doi/abs/10.1145/3386321","score":3,"flags":0,"comment_count":1,"description":"\u003cp\u003eAbstract:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eClojure was designed to be a general-purpose, practical functional language, suitable for use by professionals wherever its host language, e.g., Java, would be. Initially designed in 2005 and released in 2007, Clojure is a dialect of Lisp, but is not a direct descendant of any prior Lisp. It complements programming with pure functions of immutable data with concurrency-safe state management constructs that support writing correct multithreaded programs without the complexity of mutex locks.\u003c/p\u003e\n\u003cp\u003eClojure is intentionally hosted, in that it compiles to and runs on the runtime of another language, such as the JVM. This is more than an implementation strategy; numerous features ensure that programs written in Clojure can leverage and interoperate with the libraries of the host language directly and efficiently.\u003c/p\u003e\n\u003cp\u003eIn spite of combining two (at the time) rather unpopular ideas, functional programming and Lisp, Clojure has since seen adoption in industries as diverse as finance, climate science, retail, databases, analytics, publishing, healthcare, advertising and genomics, and by consultancies and startups worldwide, much to the career-altering surprise of its author.\u003c/p\u003e\n\u003cp\u003eMost of the ideas in Clojure were not novel, but their combination puts Clojure in a unique spot in language design (functional, hosted, Lisp). This paper recounts the motivation behind the initial development of Clojure and the rationale for various design decisions and language constructs. It then covers its evolution subsequent to release and adoption.\u003c/p\u003e\n\u003c/blockquote\u003e\n","description_plain":"Abstract:\r\n\r\n\u003eClojure was designed to be a general-purpose, practical functional language, suitable for use by professionals wherever its host language, e.g., Java, would be. Initially designed in 2005 and released in 2007, Clojure is a dialect of Lisp, but is not a direct descendant of any prior Lisp. It complements programming with pure functions of immutable data with concurrency-safe state management constructs that support writing correct multithreaded programs without the complexity of mutex locks.\r\n\u003e\r\n\u003eClojure is intentionally hosted, in that it compiles to and runs on the runtime of another language, such as the JVM. This is more than an implementation strategy; numerous features ensure that programs written in Clojure can leverage and interoperate with the libraries of the host language directly and efficiently.\r\n\u003e\r\n\u003eIn spite of combining two (at the time) rather unpopular ideas, functional programming and Lisp, Clojure has since seen adoption in industries as diverse as finance, climate science, retail, databases, analytics, publishing, healthcare, advertising and genomics, and by consultancies and startups worldwide, much to the career-altering surprise of its author.\r\n\u003e\r\n\u003eMost of the ideas in Clojure were not novel, but their combination puts Clojure in a unique spot in language design (functional, hosted, Lisp). This paper recounts the motivation behind the initial development of Clojure and the rationale for various design decisions and language constructs. It then covers its evolution subsequent to release and adoption.","comments_url":"https://lobste.rs/s/oex1is/history_clojure_2020","submitter_user":"makishimu","user_is_author":false,"tags":["clojure"]},{"short_id":"ph3fhg","short_id_url":"https://lobste.rs/s/ph3fhg","created_at":"2024-10-11T15:45:07.000-05:00","title":"FFI type mismatches in Rust for Linux","url":"https://lwn.net/SubscriberLink/993163/91519b806455b8ec/","score":10,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ph3fhg/ffi_type_mismatches_rust_for_linux","submitter_user":"tumdum","user_is_author":false,"tags":["c","linux","osdev","rust"]},{"short_id":"cba9y5","short_id_url":"https://lobste.rs/s/cba9y5","created_at":"2024-10-11T12:41:06.000-05:00","title":"AMD EPYC 9965 \"Turin Dense” vs. AmpereOne 192-Core ARM CPU Review","url":"https://www.phoronix.com/review/amd-epyc-9965-ampereone","score":14,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/cba9y5/amd_epyc_9965_turin_dense_vs_ampereone_192","submitter_user":"knl","user_is_author":false,"tags":["performance"]},{"short_id":"qfxvjs","short_id_url":"https://lobste.rs/s/qfxvjs","created_at":"2024-10-12T06:20:24.000-05:00","title":"A Small Experiment in Async Rust","url":"https://ochagavia.nl/blog/an-experiment-in-async-rust/","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/qfxvjs/small_experiment_async_rust","submitter_user":"ordinaryhat","user_is_author":false,"tags":["rust"]},{"short_id":"jfojdh","short_id_url":"https://lobste.rs/s/jfojdh","created_at":"2024-10-11T11:14:14.000-05:00","title":"uLisp - A Lisp compiler to RISC-V written in Lisp","url":"http://www.ulisp.com/show?4Y20","score":18,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/jfojdh/ulisp_lisp_compiler_risc_v_written_lisp","submitter_user":"mpweiher","user_is_author":false,"tags":["compilers","lisp"]},{"short_id":"90iam3","short_id_url":"https://lobste.rs/s/90iam3","created_at":"2024-10-10T09:08:27.000-05:00","title":"AAA gaming on Asahi Linux","url":"https://asahilinux.org/2024/10/aaa-gaming-on-asahi-linux/","score":139,"flags":0,"comment_count":29,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/90iam3/aaa_gaming_on_asahi_linux","submitter_user":"gmem","user_is_author":false,"tags":["linux"]},{"short_id":"yzi1jy","short_id_url":"https://lobste.rs/s/yzi1jy","created_at":"2024-10-11T12:12:19.000-05:00","title":"Tutorial on Good Lisp Programming Style (1993)","url":"https://www.cs.umd.edu/~nau/cmsc421/norvig-lisp-style.pdf","score":10,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/yzi1jy/tutorial_on_good_lisp_programming_style","submitter_user":"veqq","user_is_author":false,"tags":["lisp","pdf"]},{"short_id":"muormf","short_id_url":"https://lobste.rs/s/muormf","created_at":"2024-10-11T16:28:30.000-05:00","title":"Perks of Being a Python Core Developer","url":"https://mariatta.ca/posts/perks-of-python-core/","score":8,"flags":1,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/muormf/perks_being_python_core_developer","submitter_user":"levlaz","user_is_author":false,"tags":["programming","python"]},{"short_id":"wlslt8","short_id_url":"https://lobste.rs/s/wlslt8","created_at":"2024-10-11T02:39:08.000-05:00","title":"Deploying a Single-Binary Haskell Web App","url":"https://entropicthoughts.com/deploying-single-binary-haskell-web-app","score":13,"flags":0,"comment_count":7,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/wlslt8/deploying_single_binary_haskell_web_app","submitter_user":"kqr","user_is_author":true,"tags":["haskell"]},{"short_id":"kxkjgk","short_id_url":"https://lobste.rs/s/kxkjgk","created_at":"2024-10-11T14:57:40.000-05:00","title":"Request for developer feedback: customizable select","url":"https://developer.chrome.com/blog/rfc-customizable-select","score":7,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/kxkjgk/request_for_developer_feedback","submitter_user":"gmem","user_is_author":false,"tags":["web"]},{"short_id":"q1xmue","short_id_url":"https://lobste.rs/s/q1xmue","created_at":"2024-10-11T08:51:13.000-05:00","title":"The Copenhagen Book: General Guideline on Implementing Auth in Web Applications","url":"https://thecopenhagenbook.com/","score":15,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/q1xmue/copenhagen_book_general_guideline_on","submitter_user":"ayo","user_is_author":false,"tags":["security","web"]},{"short_id":"q1j6ng","short_id_url":"https://lobste.rs/s/q1j6ng","created_at":"2024-10-11T14:54:26.000-05:00","title":"Packaging an Elixir/Phoenix application with Nix","url":"https://curiosum.com/blog/packaging-elixir-application-with-nix","score":8,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/q1j6ng/packaging_elixir_phoenix_application","submitter_user":"asymmetric","user_is_author":false,"tags":["elixir","nix"]},{"short_id":"iyvdwz","short_id_url":"https://lobste.rs/s/iyvdwz","created_at":"2024-10-11T22:30:41.000-05:00","title":"cizzbuzz: An exploration of GitHub Merge Queues","url":"https://github.com/haha-business/cizzbuzz","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/iyvdwz/cizzbuzz_exploration_github_merge","submitter_user":"halosghost","user_is_author":false,"tags":["art","devops","testing"]},{"short_id":"qp3qzh","short_id_url":"https://lobste.rs/s/qp3qzh","created_at":"2024-10-12T04:12:23.000-05:00","title":"oss-fuzz-gen: LLM powered fuzzing via OSS-Fuzz","url":"https://github.com/google/oss-fuzz-gen","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/qp3qzh/oss_fuzz_gen_llm_powered_fuzzing_via_oss","submitter_user":"Kchousos","user_is_author":false,"tags":["security","testing"]},{"short_id":"wd5eab","short_id_url":"https://lobste.rs/s/wd5eab","created_at":"2024-10-11T09:07:23.000-05:00","title":"What is Sync?","url":"https://stack.convex.dev/sync","score":7,"flags":5,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/wd5eab/what_is_sync","submitter_user":"jamwt","user_is_author":true,"tags":["api","databases","distributed"]},{"short_id":"fl57a9","short_id_url":"https://lobste.rs/s/fl57a9","created_at":"2024-10-11T06:50:08.000-05:00","title":"Interneting Is Hard","url":"https://internetingishard.netlify.app","score":14,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/fl57a9/interneting_is_hard","submitter_user":"telemachus","user_is_author":false,"tags":["css","education","web"]},{"short_id":"i5yyks","short_id_url":"https://lobste.rs/s/i5yyks","created_at":"2024-10-11T15:03:36.000-05:00","title":"Writing the Worst Datalog Ever in 26loc","url":"https://buttondown.com/tensegritics-curiosities/archive/writing-the-worst-datalog-ever-in-26loc/","score":6,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/i5yyks/writing_worst_datalog_ever_26loc","submitter_user":"mpweiher","user_is_author":false,"tags":["clojure","databases"]},{"short_id":"aquxfe","short_id_url":"https://lobste.rs/s/aquxfe","created_at":"2024-10-11T05:42:02.000-05:00","title":"What are you doing this weekend?","url":"","score":8,"flags":1,"comment_count":18,"description":"\u003cp\u003eFeel free to tell what you plan on doing this weekend and even ask for help or feedback.\u003c/p\u003e\n\u003cp\u003ePlease keep in mind it’s more than OK to do nothing at all too!\u003c/p\u003e\n","description_plain":"Feel free to tell what you plan on doing this weekend and even ask for help or feedback.\r\n\r\nPlease keep in mind it’s more than OK to do nothing at all too!","comments_url":"https://lobste.rs/s/aquxfe/what_are_you_doing_this_weekend","submitter_user":"caius","user_is_author":true,"tags":["ask","programming"]},{"short_id":"y12hdo","short_id_url":"https://lobste.rs/s/y12hdo","created_at":"2024-10-10T15:07:24.000-05:00","title":"It's Not Easy Being Green: On the Energy Efficiency of Programming Languages","url":"https://arxiv.org/abs/2410.05460","score":38,"flags":0,"comment_count":38,"description":"\u003cp\u003e“Does the choice of programming language affect energy consumption? Previous highly visible studies have established associations between certain programming languages and energy consumption. A causal misinterpretation of this work has led academics and industry leaders to use or support certain languages based on their claimed impact on energy consumption. This paper tackles this causal question directly. It first corrects and improves the measurement methodology used by prior work. It then develops a detailed causal model capturing the complex relationship between programming language choice and energy consumption. This model identifies and incorporates several critical but previously overlooked factors that affect energy usage. These factors, such as distinguishing programming languages from their implementations, the impact of the application implementations themselves, the number of active cores, and memory activity, can significantly skew energy consumption measurements if not accounted for. We show – via empirical experiments, improved methodology, and careful examination of anomalies – that when these factors are controlled for, notable discrepancies in prior work vanish. Our analysis suggests that the choice of programming language implementation has no significant impact on energy consumption beyond execution time.”\u003c/p\u003e\n","description_plain":"\"Does the choice of programming language affect energy consumption? Previous highly visible studies have established associations between certain programming languages and energy consumption. A causal misinterpretation of this work has led academics and industry leaders to use or support certain languages based on their claimed impact on energy consumption. This paper tackles this causal question directly. It first corrects and improves the measurement methodology used by prior work. It then develops a detailed causal model capturing the complex relationship between programming language choice and energy consumption. This model identifies and incorporates several critical but previously overlooked factors that affect energy usage. These factors, such as distinguishing programming languages from their implementations, the impact of the application implementations themselves, the number of active cores, and memory activity, can significantly skew energy consumption measurements if not accounted for. We show -- via empirical experiments, improved methodology, and careful examination of anomalies -- that when these factors are controlled for, notable discrepancies in prior work vanish. Our analysis suggests that the choice of programming language implementation has no significant impact on energy consumption beyond execution time.\"","comments_url":"https://lobste.rs/s/y12hdo/it_s_not_easy_being_green_on_energy","submitter_user":"hwayne","user_is_author":false,"tags":["pdf","science"]}]